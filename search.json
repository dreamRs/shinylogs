[{"path":"https://dreamrs.github.io/shinylogs/articles/shinylogs.html","id":"how-to-use","dir":"Articles","previous_headings":"","what":"How to use","title":"Record logs in shiny apps","text":"Add server : store logs sub-folder logs/ application. needed (complex application), can force dependencies UI :","code":"# server track_usage(storage_mode = store_json(path = \"logs/\")) # UI use_tracking()"},{"path":"https://dreamrs.github.io/shinylogs/articles/shinylogs.html","id":"storage-modes","dir":"Articles","previous_headings":"","what":"Storage modes","title":"Record logs in shiny apps","text":"Four modes available: store_json() : store logs separate JSON files (one session). store_rds() : store logs individually RDS files (one session). store_sqlite() : store logs SQLite database. store_null() : don’t write logs disk, print R console. store_custom() : use custom function save logs wherever want. store_googledrive() : store logs(JSON files) Googledrive.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinylogs/articles/shinylogs.html","id":"shiny-server-rstudio-connect","dir":"Articles","previous_headings":"Deployment method","what":"Shiny server, RStudio Connect","title":"Record logs in shiny apps","text":"server, want save logs disk, don’t forget set write permission folder want save logs. RStudio Connect, need use absolute path specify directory save logs. can find information : Persistent Storage RStudio Connect","code":""},{"path":"https://dreamrs.github.io/shinylogs/articles/shinylogs.html","id":"shinyproxy","dir":"Articles","previous_headings":"Deployment method","what":"ShinyProxy","title":"Record logs in shiny apps","text":"ShinyProxy, can use Docker volume write logs outside application container. application.yml, can something like specs describing application: /var/log/shinylogs directory server deploy applications ShinyProxy. /root/logs directory inside Docker image, ’s path can use track_usage(), e.g. :","code":"container-volumes: [ \"/var/log/shinylogs:/root/logs\" ] track_usage(   storage_mode = store_json(path = \"/root/logs\") )"},{"path":"https://dreamrs.github.io/shinylogs/articles/shinylogs.html","id":"shinyapps-io","dir":"Articles","previous_headings":"Deployment method","what":"shinyapps.io","title":"Record logs in shiny apps","text":"’s persistent data storage shinyapps.io, can’t save logs JSON RDS files, use remote storage method. can use builtin method provided send logs Googledrive store_googledrive use store_custom send logs wherever want (dropbox, remote database, …). use Googledrive, ’ll need work Google’s API set auth account, see {gargle} documentation examples .","code":""},{"path":[]},{"path":"https://dreamrs.github.io/shinylogs/articles/shinylogs.html","id":"session","dir":"Articles","previous_headings":"Recorded informations","what":"Session","title":"Record logs in shiny apps","text":"data metadata application user’s browser, filed recorded : app : name application user : name user (using Shiny-server pro example) server_connected : timestamp application launched (server time) sessionid : session ID match session recorded informations (inputs, outputs, errors) server_disconnected : timestamp application disconnected (server time) user_agent : browser user-agent screen_res : resolution user screen (width x height) browser_res : resolution user browser (width x height) pixel_ratio : pixel ratio browser browser_connected : timestamp application launched (browser time, depends user timezone) Example:","code":"#>            app    user    server_connected                        sessionid #> 1 iris-cluster dreamRs 2019-06-19 14:07:09 9815194cfaa6317fbea68ae9537d63d1 #> 2 iris-cluster dreamRs 2019-06-19 14:56:32 0feeacf3201f5cca088059cec2b0a710 #> 3 iris-cluster dreamRs 2019-06-19 14:57:45 8b12c138f159cc5805e136338dddac59 #> 4 iris-cluster dreamRs 2019-06-19 15:03:00 f3950a1588b78d45c53c756a4136df67 #> 5 iris-cluster dreamRs 2019-06-19 15:08:53 254cafb3d5866384f13022d066546cae #> 6 iris-cluster dreamRs 2019-08-04 10:58:47 8a431f4b90b3b1926047dd2539be0793 #>   server_disconnected #> 1 2019-06-19 14:07:17 #> 2 2019-06-19 14:57:39 #> 3 2019-06-19 15:01:36 #> 4 2019-06-19 15:08:13 #> 5 2019-06-19 15:09:38 #> 6 2019-08-04 10:58:49 #>                                                                                                            user_agent #> 1 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36 #> 2 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36 #> 3 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36 #> 4 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36 #> 5 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36 #> 6                                                                                                                <NA> #>   screen_res browser_res pixel_ratio   browser_connected #> 1  1920x1080    1574x724           1 2019-06-19 14:07:09 #> 2  1920x1080    1920x937           1 2019-06-19 14:56:32 #> 3  1920x1080    1920x937           1 2019-06-19 14:57:45 #> 4  1920x1080    1920x937           1 2019-06-19 15:03:00 #> 5  1920x1080    1920x937           1 2019-06-19 15:08:53 #> 6       <NA>        <NA>          NA                <NA>"},{"path":"https://dreamrs.github.io/shinylogs/articles/shinylogs.html","id":"inputs","dir":"Articles","previous_headings":"Recorded informations","what":"Inputs","title":"Record logs in shiny apps","text":"Data inputs, default inputs recorded (even define developper, like {htmlwidgets} : {DT}, {leaflet}, …) sessionid : ID session object name : inputId input timestamp : timestamp input changed value : value taken input (can list case complex input) type : type input (defined) binding : binding input (defined) Example:","code":"#>                          sessionid     name           timestamp       value #> 1 9815194cfaa6317fbea68ae9537d63d1     xcol 2019-06-19 14:07:11 Sepal.Width #> 2 9815194cfaa6317fbea68ae9537d63d1 clusters 2019-06-19 14:07:15           6 #> 3 9815194cfaa6317fbea68ae9537d63d1 clusters 2019-06-19 14:07:15           4 #> 4 9815194cfaa6317fbea68ae9537d63d1 clusters 2019-06-19 14:07:15           5 #> 5 9815194cfaa6317fbea68ae9537d63d1 clusters 2019-06-19 14:07:14           7 #> 6 9815194cfaa6317fbea68ae9537d63d1 clusters 2019-06-19 14:07:13           4 #>           type           binding #> 1         <NA> shiny.selectInput #> 2 shiny.number shiny.numberInput #> 3 shiny.number shiny.numberInput #> 4 shiny.number shiny.numberInput #> 5 shiny.number shiny.numberInput #> 6 shiny.number shiny.numberInput"},{"path":"https://dreamrs.github.io/shinylogs/articles/shinylogs.html","id":"outputs","dir":"Articles","previous_headings":"Recorded informations","what":"Outputs","title":"Record logs in shiny apps","text":"Data recorded time output refreshed : sessionid : ID session object name : outputId output timestamp : timestamp output updated type : type output (defined) binding : binding output (defined) Example:","code":"#>                          sessionid  name           timestamp           binding #> 1 9815194cfaa6317fbea68ae9537d63d1 plot1 2019-06-19 14:07:15 shiny.imageOutput #> 2 9815194cfaa6317fbea68ae9537d63d1 plot1 2019-06-19 14:07:15 shiny.imageOutput #> 3 9815194cfaa6317fbea68ae9537d63d1 plot1 2019-06-19 14:07:14 shiny.imageOutput #> 4 9815194cfaa6317fbea68ae9537d63d1 plot1 2019-06-19 14:07:15 shiny.imageOutput #> 5 9815194cfaa6317fbea68ae9537d63d1 plot1 2019-06-19 14:07:11 shiny.imageOutput #> 6 9815194cfaa6317fbea68ae9537d63d1 plot1 2019-06-19 14:07:10 shiny.imageOutput"},{"path":"https://dreamrs.github.io/shinylogs/articles/shinylogs.html","id":"errors","dir":"Articles","previous_headings":"Recorded informations","what":"Errors","title":"Record logs in shiny apps","text":"Errors recorded propagated output, red message users see application, infos saved : sessionid : ID session object name : outputId output error happened timestamp : timestamp error error : error message () value : additional data error (generally NULL) (defined) Example:","code":"#>                          sessionid  name           timestamp #> 1 f8f50a3743023aae7d0d6350a2fd6841 plot1 2019-06-19 14:07:18 #>                                         error #> 1 NA/NaN/Inf in foreign function call (arg 1)"},{"path":"https://dreamrs.github.io/shinylogs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fanny Meyer. Author. Victor Perrier. Author, maintainer. Silex Technologies. Funder.           https://www.silex-ip.com","code":""},{"path":"https://dreamrs.github.io/shinylogs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Meyer F, Perrier V (2024). shinylogs: Record Everything Happens 'Shiny' Application. R package version 0.2.1.9000, https://dreamrs.github.io/shinylogs/, https://github.com/dreamRs/shinylogs.","code":"@Manual{,   title = {shinylogs: Record Everything that Happens in a 'Shiny' Application},   author = {Fanny Meyer and Victor Perrier},   year = {2024},   note = {R package version 0.2.1.9000, https://dreamrs.github.io/shinylogs/},   url = {https://github.com/dreamRs/shinylogs}, }"},{"path":"https://dreamrs.github.io/shinylogs/index.html","id":"shinylogs","dir":"","previous_headings":"","what":"Record Everything that Happens in a Shiny Application","title":"Record Everything that Happens in a Shiny Application","text":"Logging tool Shiny applications: record inputs outputs changes, infos user’s session. recording done client-side slow application occupy server.","code":""},{"path":"https://dreamrs.github.io/shinylogs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Record Everything that Happens in a Shiny Application","text":"can install released version shinylogs CRAN : development version GitHub :","code":"install.packages(\"shinylogs\") # install.packages(\"remotes\") remotes::install_github(\"dreamRs/shinylogs\")"},{"path":"https://dreamrs.github.io/shinylogs/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Record Everything that Happens in a Shiny Application","text":"Call main function track_usage server part application, specify write logs: function record : inputs : time input change, name, timestamp value saved errors : errors propagated outputs outputs : time output re-generated session : informations user’s browser application See vignette details (?vignette(\"shinylogs\")) online version.","code":"library(shinylogs)  track_usage(storage_mode = store_json(path = \"logs/\"))"},{"path":"https://dreamrs.github.io/shinylogs/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Record Everything that Happens in a Shiny Application","text":"example recorded logs applications available Shiny-Server: http://shinyapps.dreamrs.fr/ Number connections per applications:  Number connections time :  tabs (sidebar {shinydashboard}) shinyWidgets gallery seen :  User-agent recorded per connection can parsed uaparserjs : (unique users registered use open source version shiny-server)","code":""},{"path":"https://dreamrs.github.io/shinylogs/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Record Everything that Happens in a Shiny Application","text":"package use {packer} manage JavaScript assets, see packer’s documentation . Install nodes modules : Modify srcjs/exts/shinylogs.js, run: Re-install R package try track_usage() function.","code":"packer::npm_install() packer::bundle()"},{"path":"https://dreamrs.github.io/shinylogs/reference/read_json_logs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a directory containing JSON logs — read_json_logs","title":"Read a directory containing JSON logs — read_json_logs","text":"Read directory containing JSON logs","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/read_json_logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a directory containing JSON logs — read_json_logs","text":"","code":"read_json_logs(path)"},{"path":"https://dreamrs.github.io/shinylogs/reference/read_json_logs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a directory containing JSON logs — read_json_logs","text":"path Path directory containing JSON files vector path JSON files.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/read_json_logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a directory containing JSON logs — read_json_logs","text":"list data.table","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/read_json_logs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a directory containing JSON logs — read_json_logs","text":"","code":"# Read all JSON in a directory path_directory <- system.file(\"extdata/json\", package = \"shinylogs\") logs <- read_json_logs(path = path_directory)  # Read a single file single_file <- dir(   path = system.file(\"extdata/json\", package = \"shinylogs\"),   full.names = TRUE )[1] logs <- read_json_logs(path = single_file)"},{"path":"https://dreamrs.github.io/shinylogs/reference/read_rds_logs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a directory containing RDS logs — read_rds_logs","title":"Read a directory containing RDS logs — read_rds_logs","text":"Read directory containing RDS logs","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/read_rds_logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a directory containing RDS logs — read_rds_logs","text":"","code":"read_rds_logs(path)"},{"path":"https://dreamrs.github.io/shinylogs/reference/read_rds_logs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a directory containing RDS logs — read_rds_logs","text":"path Path directory containing RDS files vector path RDS files.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/read_rds_logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a directory containing RDS logs — read_rds_logs","text":"list data.table","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/read_rds_logs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a directory containing RDS logs — read_rds_logs","text":"","code":"if (FALSE) { # \\dontrun{ # Read all RDS in a directory logs <- read_rds_logs(path = \"path/to/directory\")  # Read a single file logs <- read_rds_logs(path = \"path/to/log.rds\") } # }"},{"path":"https://dreamrs.github.io/shinylogs/reference/store_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Use custom function to save logs — store_custom","title":"Use custom function to save logs — store_custom","text":"Store logs tracked want providing custom function write prefered location.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use custom function to save logs — store_custom","text":"","code":"store_custom(FUN, ...)"},{"path":"https://dreamrs.github.io/shinylogs/reference/store_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use custom function to save logs — store_custom","text":"FUN function take least one argument logs, correspond logs recorded list. ... Extra parameters passed FUN.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use custom function to save logs — store_custom","text":"list can used track_usage().","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use custom function to save logs — store_custom","text":"","code":"library(shiny) library(shinylogs)  # Classic Iris clustering with Shiny ui <- fluidPage(    headerPanel(\"Iris k-means clustering\"),    sidebarLayout(     sidebarPanel(       selectInput(         inputId = \"xcol\",         label = \"X Variable\",         choices = names(iris)       ),       selectInput(         inputId = \"ycol\",         label = \"Y Variable\",         choices = names(iris),         selected = names(iris)[[2]]       ),       numericInput(         inputId = \"clusters\",         label = \"Cluster count\",         value = 3,         min = 1,         max = 9       )     ),     mainPanel(       plotOutput(\"plot1\")     )   ) )  server <- function(input, output, session) {    # Just take a look at what is generated   track_usage(     storage_mode = store_custom(FUN = function(logs) {       str(logs, max.level = 3)       invisible()     })   )    # classic server logic    selectedData <- reactive({     iris[, c(input$xcol, input$ycol)]   })    clusters <- reactive({     kmeans(selectedData(), input$clusters)   })    output$plot1 <- renderPlot({     palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",               \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))      par(mar = c(5.1, 4.1, 0, 1))     plot(selectedData(),          col = clusters()$cluster,          pch = 20, cex = 3)     points(clusters()$centers, pch = 4, cex = 4, lwd = 4)   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinylogs/reference/store_googledrive.html","id":null,"dir":"Reference","previous_headings":"","what":"Use Google Drive as storage mode — store_googledrive","title":"Use Google Drive as storage mode — store_googledrive","text":"logs written file.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_googledrive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use Google Drive as storage mode — store_googledrive","text":"","code":"store_googledrive(path)"},{"path":"https://dreamrs.github.io/shinylogs/reference/store_googledrive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use Google Drive as storage mode — store_googledrive","text":"path Path folder Drive send logs.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_googledrive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use Google Drive as storage mode — store_googledrive","text":"list can used track_usage().","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_googledrive.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Use Google Drive as storage mode — store_googledrive","text":"See gargle package manage authentication, especially vignette gargle package manage process.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_googledrive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use Google Drive as storage mode — store_googledrive","text":"","code":"if (FALSE) { # \\dontrun{ # In your global, manage Google Drive access drive_auth(path = \"/path/to/your/service-account-token.json\") # see https://gargle.r-lib.org/articles/articles/managing-tokens-securely.html # to manage your token securely  # Then in server, use: track_usage(storage_mode = store_googledrive(path = \"my-logs/\"))  # you may have to share my-logs/ folder with your service account  } # }"},{"path":"https://dreamrs.github.io/shinylogs/reference/store_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Use JSON files as storage mode — store_json","title":"Use JSON files as storage mode — store_json","text":"One JSON written session application.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use JSON files as storage mode — store_json","text":"","code":"store_json(path)"},{"path":"https://dreamrs.github.io/shinylogs/reference/store_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use JSON files as storage mode — store_json","text":"path Path write JSON files.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use JSON files as storage mode — store_json","text":"list can used track_usage().","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use JSON files as storage mode — store_json","text":"","code":"library(shiny) library(shinylogs)  # temp directory for writing logs tmp <- tempdir()  # when app stop, # navigate to the directory containing logs onStop(function() {   browseURL(url = tmp) }) #> function ()  #> { #>     .callbacks$remove(id) #> } #> <bytecode: 0x563eb7717eb0> #> <environment: 0x563eb8dbadd8>  # Classic Iris clustering with Shiny ui <- fluidPage(    headerPanel(\"Iris k-means clustering\"),    sidebarLayout(     sidebarPanel(       selectInput(         inputId = \"xcol\",         label = \"X Variable\",         choices = names(iris)       ),       selectInput(         inputId = \"ycol\",         label = \"Y Variable\",         choices = names(iris),         selected = names(iris)[[2]]       ),       numericInput(         inputId = \"clusters\",         label = \"Cluster count\",         value = 3,         min = 1,         max = 9       )     ),     mainPanel(       plotOutput(\"plot1\")     )   ) )  server <- function(input, output, session) {    # Store JSON with logs in the temp dir   track_usage(     storage_mode = store_json(path = tmp)   )    # classic server logic    selectedData <- reactive({     iris[, c(input$xcol, input$ycol)]   })    clusters <- reactive({     kmeans(selectedData(), input$clusters)   })    output$plot1 <- renderPlot({     palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",               \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))      par(mar = c(5.1, 4.1, 0, 1))     plot(selectedData(),          col = clusters()$cluster,          pch = 20, cex = 3)     points(clusters()$centers, pch = 4, cex = 4, lwd = 4)   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinylogs/reference/store_null.html","id":null,"dir":"Reference","previous_headings":"","what":"No storage on disk — store_null","title":"No storage on disk — store_null","text":"write anything, special inputs created track_usage() available server optionally logs printed console.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"No storage on disk — store_null","text":"","code":"store_null(console = TRUE)"},{"path":"https://dreamrs.github.io/shinylogs/reference/store_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"No storage on disk — store_null","text":"console Print logs R console.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"No storage on disk — store_null","text":"list can used track_usage().","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_null.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"No storage on disk — store_null","text":"","code":"library(shiny) library(shinylogs)  ui <- fluidPage(   tags$h2(\"Record inputs change\"),   fluidRow(     column(       width = 3,       selectInput(         inputId = \"select\",         label = \"Select input\",         choices = month.name       ),       numericInput(         inputId = \"numeric\",         label = \"Numerci input\",         value = 4,         min = 0, max = 20       ),       checkboxGroupInput(         inputId = \"checkboxGroup\",         label = \"Checkbox group input\",         choices = LETTERS[1:5]       ),       sliderInput(         inputId = \"slider\",         label = \"Slider input\",         min = 0, max = 100, value = 50       )     ),     column(       width = 9,       tags$b(\"Last input:\"),       verbatimTextOutput(outputId = \"last_input\"),       tags$b(\"All inputs:\"),       verbatimTextOutput(outputId = \"all_inputs\")     )   ) )  server <- function(input, output, session) {    track_usage(     storage_mode = store_null() # dont store on disk   )    output$last_input <- renderPrint({     input$.shinylogs_lastInput # last input triggered   })    output$all_inputs <- renderPrint({     input$.shinylogs_input # all inputs that have changed   })  }   if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinylogs/reference/store_rds.html","id":null,"dir":"Reference","previous_headings":"","what":"Use RDS files as storage mode — store_rds","title":"Use RDS files as storage mode — store_rds","text":"One RDS written session application.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_rds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use RDS files as storage mode — store_rds","text":"","code":"store_rds(path)"},{"path":"https://dreamrs.github.io/shinylogs/reference/store_rds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use RDS files as storage mode — store_rds","text":"path Path write RDS files.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_rds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use RDS files as storage mode — store_rds","text":"list can used track_usage().","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_rds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use RDS files as storage mode — store_rds","text":"","code":"library(shiny) library(shinylogs)  # temp directory for writing logs tmp <- tempdir()  # when app stop, # navigate to the directory containing logs onStop(function() {   browseURL(url = tmp) }) #> function ()  #> { #>     .callbacks$remove(id) #> } #> <bytecode: 0x563eb7717eb0> #> <environment: 0x563ebbeee998>  # Classir Iris clustering with Shiny ui <- fluidPage(    headerPanel(\"Iris k-means clustering\"),    sidebarLayout(     sidebarPanel(       selectInput(         inputId = \"xcol\",         label = \"X Variable\",         choices = names(iris)       ),       selectInput(         inputId = \"ycol\",         label = \"Y Variable\",         choices = names(iris),         selected = names(iris)[[2]]       ),       numericInput(         inputId = \"clusters\",         label = \"Cluster count\",         value = 3,         min = 1,         max = 9       )     ),     mainPanel(       plotOutput(\"plot1\")     )   ) )  server <- function(input, output, session) {    # Store RDS with logs in the temp dir   track_usage(     storage_mode = store_rds(path = tmp)   )    # classic server logic    selectedData <- reactive({     iris[, c(input$xcol, input$ycol)]   })    clusters <- reactive({     kmeans(selectedData(), input$clusters)   })    output$plot1 <- renderPlot({     palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",               \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))      par(mar = c(5.1, 4.1, 0, 1))     plot(selectedData(),          col = clusters()$cluster,          pch = 20, cex = 3)     points(clusters()$centers, pch = 4, cex = 4, lwd = 4)   })  }   if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/shinylogs/reference/store_sqlite.html","id":null,"dir":"Reference","previous_headings":"","what":"Use SQLite database as storage mode — store_sqlite","title":"Use SQLite database as storage mode — store_sqlite","text":"logs written file.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_sqlite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use SQLite database as storage mode — store_sqlite","text":"","code":"store_sqlite(path)"},{"path":"https://dreamrs.github.io/shinylogs/reference/store_sqlite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use SQLite database as storage mode — store_sqlite","text":"path Path SQLite file directory create one.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_sqlite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use SQLite database as storage mode — store_sqlite","text":"list can used track_usage().","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/store_sqlite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use SQLite database as storage mode — store_sqlite","text":"","code":"if (interactive()) {    library(shiny)   library(shinylogs)    # temp directory for writing logs   tmp <- tempdir()    # when app stop,   # navigate to the directory containing logs   onStop(function() {     browseURL(url = tmp)   })    # Classir Iris clustering with Shiny   ui <- fluidPage(      headerPanel(\"Iris k-means clustering\"),      sidebarLayout(       sidebarPanel(         selectInput(           inputId = \"xcol\",           label = \"X Variable\",           choices = names(iris)         ),         selectInput(           inputId = \"ycol\",           label = \"Y Variable\",           choices = names(iris),           selected = names(iris)[[2]]         ),         numericInput(           inputId = \"clusters\",           label = \"Cluster count\",           value = 3,           min = 1,           max = 9         )       ),       mainPanel(         plotOutput(\"plot1\")       )     )   )    server <- function(input, output, session) {      # Store RDS with logs in the temp dir     track_usage(       storage_mode = store_sqlite(path = tmp)     )      # classic server logic      selectedData <- reactive({       iris[, c(input$xcol, input$ycol)]     })      clusters <- reactive({       kmeans(selectedData(), input$clusters)     })      output$plot1 <- renderPlot({       palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",                 \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))        par(mar = c(5.1, 4.1, 0, 1))       plot(selectedData(),            col = clusters()$cluster,            pch = 20, cex = 3)       points(clusters()$centers, pch = 4, cex = 4, lwd = 4)     })    }    shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinylogs/reference/track_usage.html","id":null,"dir":"Reference","previous_headings":"","what":"Track usage of a Shiny app — track_usage","title":"Track usage of a Shiny app — track_usage","text":"Used Shiny server record inputs output changes errors occurs output.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/track_usage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Track usage of a Shiny app — track_usage","text":"","code":"track_usage(   storage_mode,   what = c(\"session\", \"input\", \"output\", \"error\"),   exclude_input_regex = NULL,   exclude_input_id = NULL,   on_unload = FALSE,   app_name = NULL,   exclude_users = NULL,   get_user = NULL,   dependencies = TRUE,   session = getDefaultReactiveDomain() )"},{"path":"https://dreamrs.github.io/shinylogs/reference/track_usage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Track usage of a Shiny app — track_usage","text":"storage_mode Storage mode use : store_json(), store_rds(), store_sqlite() store_null(). Elements record \"session\", \"input\", \"output\" \"error\". exclude_input_regex Regular expression exclude inputs tracking. exclude_input_id Vector inputId exclude tracking. on_unload Logical, save log user close browser window tab, TRUE prevent create shinylogs input normal use application, created close, downside popup appear asking close page. app_name Name app character string. NULL, basename(getwd()) (name folder application located) used. exclude_users Character vectors user necessary save log. get_user function get user name, return character take one argument: Shiny session. dependencies Load dependencies client, can set FALSE use_tracking() called UI. session shiny session.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/track_usage.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Track usage of a Shiny app — track_usage","text":"following inputs accessible server: .shinylogs_lastInput : last input used user .shinylogs_input : inputs send browser server .shinylogs_error : errors generated outputs elements .shinylogs_output : outputs generated server .shinylogs_browserData : information browser application displayed.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/track_usage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Track usage of a Shiny app — track_usage","text":"","code":"# Save logs on disk ----------------------------------  if (interactive()) {    # temporary directory for writing logs   tmp <- tempdir()    # when app stop,   # navigate to the directory containing logs   onStop(function() {     browseURL(url = tmp)   })    # Classic Iris clustering with Shiny   ui <- fluidPage(      headerPanel(\"Iris k-means clustering\"),      sidebarLayout(       sidebarPanel(         selectInput(           inputId = \"xcol\",           label = \"X Variable\",           choices = names(iris)         ),         selectInput(           inputId = \"ycol\",           label = \"Y Variable\",           choices = names(iris),           selected = names(iris)[[2]]         ),         numericInput(           inputId = \"clusters\",           label = \"Cluster count\",           value = 3,           min = 1,           max = 9         )       ),       mainPanel(         plotOutput(\"plot1\")       )     )   )    server <- function(input, output, session) {      # Store JSON with logs in the temp dir     track_usage(       storage_mode = store_json(path = tmp)     )      # classic server logic      selectedData <- reactive({       iris[, c(input$xcol, input$ycol)]     })      clusters <- reactive({       kmeans(selectedData(), input$clusters)     })      output$plot1 <- renderPlot({       palette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",                 \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))        par(mar = c(5.1, 4.1, 0, 1))       plot(selectedData(),            col = clusters()$cluster,            pch = 20, cex = 3)       points(clusters()$centers, pch = 4, cex = 4, lwd = 4)     })    }    shinyApp(ui, server)  }  # Logs in console & special inputs ------------------------  if (interactive()) {   library(shiny)   library(shinylogs)    ui <- fluidPage(     tags$h2(\"Record inputs change\"),     fluidRow(       column(         width = 3,         selectInput(           inputId = \"select\",           label = \"Select input\",           choices = month.name         ),         numericInput(           inputId = \"numeric\",           label = \"Numerci input\",           value = 4,           min = 0, max = 20         ),         checkboxGroupInput(           inputId = \"checkboxGroup\",           label = \"Checkbox group input\",           choices = LETTERS[1:5]         ),         sliderInput(           inputId = \"slider\",           label = \"Slider input\",           min = 0, max = 100, value = 50         )       ),       column(         width = 9,         tags$b(\"Last input triggered:\"),         verbatimTextOutput(outputId = \"last_input\"),         tags$b(\"All inputs:\"),         verbatimTextOutput(outputId = \"all_inputs\")       )     )   )    server <- function(input, output, session) {      # dont store on disk, just show in R console     track_usage(       storage_mode = store_null()     )      # last input triggered     output$last_input <- renderPrint({       input$.shinylogs_lastInput     })      # all inputs that have changed     output$all_inputs <- renderPrint({       input$.shinylogs_input     })    }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/shinylogs/reference/use_tracking.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert dependencies to track usage of a Shiny app — use_tracking","title":"Insert dependencies to track usage of a Shiny app — use_tracking","text":"used UI application, create new inputs available server. Set dependencies = FALSE track_usage() server-side load dependencies .","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/use_tracking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert dependencies to track usage of a Shiny app — use_tracking","text":"","code":"use_tracking(   what = c(\"session\", \"input\", \"output\", \"error\"),   exclude_input_regex = NULL,   exclude_input_id = NULL,   on_unload = FALSE,   app_name = NULL )"},{"path":"https://dreamrs.github.io/shinylogs/reference/use_tracking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert dependencies to track usage of a Shiny app — use_tracking","text":"Elements record \"session\", \"input\", \"output\" \"error\". exclude_input_regex Regular expression exclude inputs tracking. exclude_input_id Vector inputId exclude tracking. on_unload Logical, save log user close browser window tab, TRUE prevent create shinylogs input normal use application, created close, downside popup appear asking close page. app_name Name app character string. NULL, basename(getwd()) (name folder application located) used.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/use_tracking.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Insert dependencies to track usage of a Shiny app — use_tracking","text":"following inputs accessible server (according used record argument): .shinylogs_lastInput : last input used user .shinylogs_input : inputs send browser server .shinylogs_error : errors generated outputs elements .shinylogs_output : outputs generated server .shinylogs_browserData : information browser application displayed.","code":""},{"path":"https://dreamrs.github.io/shinylogs/reference/use_tracking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert dependencies to track usage of a Shiny app — use_tracking","text":"","code":"if (interactive()) {    library(shiny)   library(shinylogs)    ui <- fluidPage(      # Load tracking dependencies     use_tracking(),      splitLayout(       cellArgs = list(style = \"height: 250px\"),       radioButtons(\"radio\", \"Radio:\", names(iris)),       checkboxGroupInput(\"checkbox\", \"Checkbox:\", names(iris)),       selectInput(\"select\", \"Select:\", names(iris))     ),      tags$p(\"Last input used, the 'name' slot correspond to inputId:\"),     verbatimTextOutput(\"last\")   )    server <- function(input, output, session) {      output$last <- renderPrint({       input$.shinylogs_lastInput     })    }    shinyApp(ui, server)  }"},{"path":"https://dreamrs.github.io/shinylogs/news/index.html","id":"shinylogs-022","dir":"Changelog","previous_headings":"","what":"shinylogs 0.2.2","title":"shinylogs 0.2.2","text":"Add check Shinyproxy username HTTP header #29","code":""},{"path":"https://dreamrs.github.io/shinylogs/news/index.html","id":"shinylogs-021","dir":"Changelog","previous_headings":"","what":"shinylogs 0.2.1","title":"shinylogs 0.2.1","text":"CRAN release: 2022-04-18 app_name: explicitly set application’s name, thanks @PaulC91 : elements record \"session\", \"input\", \"output\" \"error\".","code":""},{"path":"https://dreamrs.github.io/shinylogs/news/index.html","id":"shinylogs-020","dir":"Changelog","previous_headings":"","what":"shinylogs 0.2.0","title":"shinylogs 0.2.0","text":"CRAN release: 2021-11-26 Timestamp now recorded microseconds (fix #6). Added store_googledrive() store logs json Google drive. Added store_custom() use custom function deal logs generated. Use {packer} manage JavaScript assets.","code":""},{"path":"https://dreamrs.github.io/shinylogs/news/index.html","id":"shinylogs-017","dir":"Changelog","previous_headings":"","what":"shinylogs 0.1.7","title":"shinylogs 0.1.7","text":"CRAN release: 2019-08-21 Fix bug used {shinymanager} (fix #2).","code":""},{"path":"https://dreamrs.github.io/shinylogs/news/index.html","id":"shinylogs-016","dir":"Changelog","previous_headings":"","what":"shinylogs 0.1.6","title":"shinylogs 0.1.6","text":"CRAN release: 2019-07-18 use_tracking now exported load dependencies directly UI, usefull big applications. Ability print logs recorded console.","code":""},{"path":"https://dreamrs.github.io/shinylogs/news/index.html","id":"shinylogs-015","dir":"Changelog","previous_headings":"","what":"shinylogs 0.1.5","title":"shinylogs 0.1.5","text":"CRAN release: 2019-05-09 First release : Track record use applications user’s interactions ‘Shiny’ inputs. Allow save inputs clicked, output generated eventually errors.","code":""}]
